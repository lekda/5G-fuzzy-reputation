hydra:
  run:
    dir: results/run/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: results/multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
    n_jobs: -1
    backend: null
    prefer: processes
    require: null
    verbose: 0
    timeout: null
    pre_dispatch: 2*n_jobs
    batch_size: auto
    temp_folder: null
    max_nbytes: null
    mmap_mode: r
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - simulation/distribution=fuzzy_failure
    - reputation/decay=simple_window
    - simulation.seed=56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86
  job:
    name: __main__
    chdir: true
    override_dirname: reputation/decay=simple_window,simulation.seed=56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,simulation/distribution=fuzzy_failure
    id: ???
    num: ???
    config_name: fuzzy_config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/pm/base-reputation-system
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/pm/base-reputation-system/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      reputation/decay: simple_window
      topology/core_topo: base
      topology/access_topo: dense
      topology: default
      simulation: fuzzy
      simulation/environment: base
      simulation/distribution: fuzzy_failure
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: joblib
      hydra/output: default
  verbose: false
simulation:
  seed: 56
  distribution:
  - nb_peers: 3
    build_func: ${peers.f_embb_good}
  - nb_peers: 2
    build_func: ${peers.f_embb_outage}
  - nb_peers: 3
    build_func: ${peers.f_urllc_good}
  - nb_peers: 2
    build_func: ${peers.f_urllc_outage}
  - nb_peers: 3
    build_func: ${peers.f_mmtc_good}
  - nb_peers: 2
    build_func: ${peers.f_mmtc_outage}
  environment:
    _target_: reput.environment.Environment
    sim_length: ${simulation.sim_length}
    random_rate: ${simulation.random_rate}
    newcommer_random_rate: ${simulation.newcommer_random_rate}
    r_sample_nb: ${simulation.r_sample_nb}
    reput: ${simulation.reput}
    fuzzy: ${simulation.fuzzy}
    seed: ${simulation.seed}
  sim_length: 15
  random_rate:
    0.0: 0.0
  newcommer_random_rate:
    0.0: 0.0
  r_sample_nb: 15
  reput: true
  fuzzy: true
  transaction_duration: 0.025
  capacity: 10.0
  peer_interactions: 150
  breaking_rate: 0.0
  initial_reput:
    latency: 1
    bandwith: 1000
    loss: 100000
  forgiveness_delay: ${simulation.sim_length}
topology:
  access_topo:
  - nb_zones: 10
    build_func: ${topology.access_zones.dense}
  access_zones:
    dense:
      _target_: reput.topology.AccessNetwork
      peer_nb: 8
    mild:
      _target_: reput.topology.AccessNetwork
      peer_nb: 5
    scarce:
      _target_: reput.topology.AccessNetwork
      peer_nb: 3
  core_topo:
  - nb_zones: 5
    build_func: ${topology.core_zones.dense}
  core_zones:
    dense:
      _target_: reput.topology.CoreNetwork
      peer_nb: 8
    scarce:
      _target_: reput.topology.CoreNetwork
      peer_nb: 3
    single:
      _target_: reput.topology.CoreNetwork
      peer_nb: 1
peers:
  outage:
    _target_: reput.peer.Peer
    behavior:
      0.0: 0.99
      2.0: 0.0
      2.5: 0.99
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: outage
  good:
    _target_: reput.peer.Peer
    behavior:
      0.0: 0.95
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: good
  f_embb_bad:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 60
        bandwith: 50
        loss: 1000
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: embb_bad
    dispersion: low
    usecase: eMBB
  f_embb_good:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 5
        bandwith: 400
        loss: 100
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: embb_good
    dispersion: low
    usecase: eMBB
  f_embb_outage:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 5
        bandwith: 400
        loss: 100
      6.0:
        latency: 350
        bandwith: 1.0
        loss: 1.0
      8.0:
        latency: 5
        bandwith: 400
        loss: 100
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: embb_outage
    dispersion: low
    usecase: eMBB
  f_embb_oscillating:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 5
        bandwith: 400
        loss: 100
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: 0.05
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: embb_oscillating
    dispersion: low
    usecase: eMBB
  f_mmtc_bad:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 75
        bandwith: 50
        loss: 500
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:simulation.fuzzy}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: mmtc_bad
    dispersion: low
    usecase: mMTC
  f_mmtc_good:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 75
        bandwith: 750
        loss: 60000
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: mmtc_good
    dispersion: low
    usecase: mMTC
  f_mmtc_outage:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 75
        bandwith: 750
        loss: 60000
      6.0:
        latency: 350
        bandwith: 1.0
        loss: 1.0
      8.0:
        latency: 75
        bandwith: 750
        loss: 60000
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: mmtc_outage
    dispersion: low
    usecase: mMTC
  f_mmtc_oscillating:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 75
        bandwith: 750
        loss: 60000
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: 0.05
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: mmtc_oscillating
    dispersion: low
    usecase: mMTC
  f_urllc_bad:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 75
        bandwith: 300
        loss: 100
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: urllc_bad
    dispersion: low
    usecase: URLLC
  f_urllc_good:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 4
        bandwith: 50
        loss: 70000
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: urllc_good
    dispersion: low
    usecase: URLLC
  f_urllc_outage:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 4
        bandwith: 50
        loss: 70000
      6.0:
        latency: 350
        bandwith: 1.0
        loss: 1.0
      8.0:
        latency: 4
        bandwith: 50
        loss: 70000
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: urllc_outage
    dispersion: low
    usecase: URLLC
  f_urllc_oscillating:
    _target_: reput.peer.Peer
    behavior:
      0.0:
        latency: 4
        bandwith: 50
        loss: 70000
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: 0.05
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: urllc_oscillating
    dispersion: low
    usecase: URLLC
  bad:
    _target_: reput.peer.Peer
    behavior:
      0.0: 0.5
    transaction_duration: ${simulation.transaction_duration}
    total_capacity: ${simulation.capacity}
    breaking_rate: ${simulation.breaking_rate}
    peer_interactions: ${simulation.peer_interactions}
    initial_reput: ${simulation.initial_reput}
    transaction_type: ${transaction_selector:${simulation.fuzzy}}
    forgiveness_delay: ${simulation.forgiveness_delay}
    label: bad
reputation:
  decay:
    _target_: reput.decay._simple_window
    _partial_: true
    hist_size: 5.0
